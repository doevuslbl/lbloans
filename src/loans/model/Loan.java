/*
 * LB Loan Management API
 * API for loan management
 *
 * OpenAPI spec version: 0.0.1
 * Contact: raynard.eiger@outlook.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package loans.model;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import org.springframework.util.StringUtils;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.ibm.icu.util.Currency;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Loan
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2018-10-17T20:37:39.242Z[GMT]")
@Entity
public class Loan implements Validatable {

	// could include Guava library and use @VisibleForTesting - these need not be not-private other than for testing purposes
	public static final String FREQUENCY_EMPTY = "[Frequency must be specified.]";
	public static final String INVESTMENTS_MORE_THAN_LOAN = "[The sum of investments cannot exceed the total loan amount.]";
	public static final String RATES_EMPTY = "[At least one rate period must be specified.]";
	public static final String LOAN_PERIODS_INVALID = "[Number of periods must be specified and larger than 0.]";
	public static final String LOAN_AMOUNT_INVALID = "[Loan amount must be specified and larger than 0.]";
	public static final String END_DATE_BEFORE_START_DATE = "[The end date cannot be before start date.]";
	public static final String START_DATE_EMPTY = "[Start date must be provided.]";
	public static final String END_DATE_EMPTY = "[End date must be provided.]";
	public static final String CUSTOMER_EMPTY = "[The customer must be specified.";
	public static final String CURRENCY_INVALID = "[The currency on the loan is invalid.]";
	public static final String CURRENCY_EMPTY = "[The currency must be specified.]";

	@JsonProperty("id")
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private UUID id = null;

	@JsonProperty("rates")
	@OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
	private List<Rate> rates = new ArrayList<>();

	@JsonProperty("periods")
	private Integer periods = null;

	@JsonProperty("frequency")
	private Frequency frequency = null;

	@JsonProperty("balloon")
	private Double balloon = null;

	// Ideally, this should be BigDecimal
	@JsonProperty("loanAmount")
	private Double loanAmount = null;

	@JsonProperty("currency")
	private String currency = null;

	@JsonProperty("startDate")
	@JsonFormat(pattern = "dd-MM-yyyy")
	private LocalDate startDate = null;

	@JsonProperty("endDate")
	@JsonFormat(pattern = "dd-MM-yyyy")
	private LocalDate endDate = null;

	@JsonProperty("customer")
	@ManyToOne
	@JoinColumn(name = "customer_id", nullable = false)
	private Customer customer = null;

	@JsonProperty("investments")
	@JsonManagedReference("loan_investment")
	@OneToMany(cascade = CascadeType.ALL, orphanRemoval = false)
	private List<Investment> investments = null;

	public Loan id(UUID id) {
		this.id = id;
		return this;
	}

	@Schema(example = "d290f1ee-6c54-4b01-90e6-d701748f0851", required = true, description = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public Loan rates(List<Rate> rates) {
		this.rates = rates;
		return this;
	}

	public Loan addRatesItem(Rate ratesItem) {
		this.rates.add(ratesItem);
		return this;
	}

	@Schema(required = true, description = "")
	public List<Rate> getRates() {
		return rates;
	}

	public void setRates(List<Rate> rates) {
		this.rates = rates;
	}

	public Loan periods(Integer periods) {
		this.periods = periods;
		return this;
	}

	@Schema(required = true, description = "")
	public Integer getPeriods() {
		return periods;
	}

	public void setPeriods(Integer periods) {
		this.periods = periods;
	}

	public Loan frequency(Frequency frequency) {
		this.frequency = frequency;
		return this;
	}

	@Schema(required = true, description = "")
	public Frequency getFrequency() {
		return frequency;
	}

	public void setFrequency(Frequency frequency) {
		this.frequency = frequency;
	}

	public Loan balloon(Double balloon) {
		this.balloon = balloon;
		return this;
	}

	public Double getBalloon() {
		return balloon;
	}

	public void setBalloon(Double balloon) {
		this.balloon = balloon;
	}

	public Loan loanAmount(Double loanAmount) {
		this.loanAmount = loanAmount;
		return this;
	}

	@Schema(required = true, description = "")
	public Double getLoanAmount() {
		return loanAmount;
	}

	public void setLoanAmount(Double loanAmount) {
		this.loanAmount = loanAmount;
	}

	public Loan currency(String currency) {
		this.currency = currency;
		return this;
	}

	@Schema(example = "USD", required = true, description = "")
	public String getCurrency() {
		return currency;
	}

	public void setCurrency(String currency) {
		this.currency = currency;
	}

	public Loan startDate(LocalDate startDate) {
		this.startDate = startDate;
		return this;
	}

	@Schema(required = true, description = "")
	public LocalDate getStartDate() {
		return startDate;
	}

	public void setStartDate(LocalDate startDate) {
		this.startDate = startDate;
	}

	public Loan endDate(LocalDate endDate) {
		this.endDate = endDate;
		return this;
	}

	@Schema(required = true, description = "")
	public LocalDate getEndDate() {
		return endDate;
	}

	public void setEndDate(LocalDate endDate) {
		this.endDate = endDate;
	}

	public Loan customer(Customer customer) {
		this.customer = customer;
		return this;
	}

	@Schema(required = true, description = "")
	public Customer getCustomer() {
		return customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	public Loan investments(List<Investment> investments) {
		this.investments = investments;
		return this;
	}

	public Loan addInvestmentItem(Investment investorItem) {
		if (this.investments == null) {
			this.investments = new ArrayList<>();
		}
		this.investments.add(investorItem);
		return this;
	}

	@Schema(description = "")
	public List<Investment> getInvestments() {
		return investments;
	}

	public void setInvestments(List<Investment> investments) {
		this.investments = investments;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((balloon == null) ? 0 : balloon.hashCode());
		result = prime * result + ((currency == null) ? 0 : currency.hashCode());
		result = prime * result + ((customer == null) ? 0 : customer.hashCode());
		result = prime * result + ((endDate == null) ? 0 : endDate.hashCode());
		result = prime * result + ((frequency == null) ? 0 : frequency.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((investments == null) ? 0 : investments.hashCode());
		result = prime * result + ((loanAmount == null) ? 0 : loanAmount.hashCode());
		result = prime * result + ((periods == null) ? 0 : periods.hashCode());
		result = prime * result + ((rates == null) ? 0 : rates.hashCode());
		result = prime * result + ((startDate == null) ? 0 : startDate.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Loan other = (Loan) obj;
		if (balloon == null) {
			if (other.balloon != null)
				return false;
		} else if (!balloon.equals(other.balloon))
			return false;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		if (customer == null) {
			if (other.customer != null)
				return false;
		} else if (!customer.equals(other.customer))
			return false;
		if (endDate == null) {
			if (other.endDate != null)
				return false;
		} else if (!endDate.equals(other.endDate))
			return false;
		if (frequency == null) {
			if (other.frequency != null)
				return false;
		} else if (!frequency.equals(other.frequency))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (investments == null) {
			if (other.investments != null)
				return false;
		} else if (!investments.equals(other.investments))
			return false;
		if (loanAmount == null) {
			if (other.loanAmount != null)
				return false;
		} else if (!loanAmount.equals(other.loanAmount))
			return false;
		if (periods == null) {
			if (other.periods != null)
				return false;
		} else if (!periods.equals(other.periods))
			return false;
		if (rates == null) {
			if (other.rates != null)
				return false;
		} else if (!rates.equals(other.rates))
			return false;
		if (startDate == null) {
			if (other.startDate != null)
				return false;
		} else if (!startDate.equals(other.startDate))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Loan [id=" + id + ", rates=" + rates + ", periods=" + periods + ", frequency=" + frequency + ", balloon="
		    + balloon + ", loanAmount=" + loanAmount + ", currency=" + currency + ", startDate=" + startDate + ", endDate="
		    + endDate + ", customer=" + customer + ", investments=" + investments + "]";
	}

	@Override
	public List<String> validate() {
		List<String> errors = new ArrayList<>();
		if (StringUtils.isEmpty(currency)) {
			errors.add(CURRENCY_EMPTY);
		} else if (!Currency.isAvailable(currency, null, null)) {
			errors.add(CURRENCY_INVALID);
		}

		if (customer == null) {
			errors.add(CUSTOMER_EMPTY);
		}

		if (endDate == null) {
			errors.add(END_DATE_EMPTY);
		}

		if (startDate == null) {
			errors.add(START_DATE_EMPTY);
		}

		if (endDate != null && startDate != null && !endDate.isAfter(startDate)) {
			errors.add(END_DATE_BEFORE_START_DATE);
		}

		// Does a loan *need* investments?

		if (investments != null && !investments.isEmpty()
		    && investments.stream().collect(Collectors.summingDouble(Investment::getAmount)) > loanAmount) {
			errors.add(INVESTMENTS_MORE_THAN_LOAN);
		}

		if (loanAmount == null || loanAmount <= 0) {
			errors.add(LOAN_AMOUNT_INVALID);
		}

		if (periods == null || periods <= 0) {
			errors.add(LOAN_PERIODS_INVALID);
		}

		if (frequency == null) {
			errors.add(FREQUENCY_EMPTY);
		}

		if (rates.isEmpty()) {
			errors.add(RATES_EMPTY);
		}

		return errors;
	}

	public enum Frequency {

		MONTHLY("monthly"),
		QUARTERLY("quarterly"),
		ANNUALLY("annually");

		private final String description;

		private Frequency(String description) {
			this.description = description;
		}

		public String getDescription() {
			return description;
		}

		@JsonCreator
		public static Frequency fromDescription(String description) {
			if (description == null)
				throw new IllegalArgumentException("Description cannot be null.");
			for (Frequency value : values())
				if (description.equalsIgnoreCase(value.getDescription()))
					return value;
			
			throw new IllegalArgumentException("The provided description does not match a valid frequency.");
		}
	}

}
